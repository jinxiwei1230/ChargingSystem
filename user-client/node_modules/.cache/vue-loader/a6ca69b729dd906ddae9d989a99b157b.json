{"remainingRequest":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\git_project\\ChargingSystem\\user-client\\src\\views\\QueueStatus.vue?vue&type=style&index=0&id=56bb9ace&scoped=true&lang=css","dependencies":[{"path":"D:\\git_project\\ChargingSystem\\user-client\\src\\views\\QueueStatus.vue","mtime":1749615038765},{"path":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1749209591407},{"path":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1749209591734},{"path":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\postcss-loader\\src\\index.js","mtime":1749209590887},{"path":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1749209592798},{"path":"D:\\git_project\\ChargingSystem\\user-client\\node_modules\\vue-loader\\lib\\index.js","mtime":1749209591090}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoucXVldWUtc3RhdHVzLWNvbnRhaW5lciB7DQogIHBhZGRpbmc6IDIwcHg7DQp9DQoucXVldWUtaW5mbyB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCi5xdWV1ZS1udW1iZXIgew0KICBtYXJnaW4tYm90dG9tOiAyMHB4Ow0KfQ0KLm51bWJlciB7DQogIGZvbnQtc2l6ZTogNDhweDsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogIGNvbG9yOiAjNDA5RUZGOw0KICBtYXJnaW46IDIwcHggMDsNCn0NCi5xdWV1ZS1kZXRhaWxzIHsNCiAgdGV4dC1hbGlnbjogbGVmdDsNCiAgbWF4LXdpZHRoOiA0MDBweDsNCiAgbWFyZ2luOiAwIGF1dG87DQp9DQouZGV0YWlsLWl0ZW0gew0KICBtYXJnaW46IDE1cHggMDsNCiAgZm9udC1zaXplOiAxNnB4Ow0KfQ0KLmxhYmVsIHsNCiAgY29sb3I6ICM2MDYyNjY7DQogIG1hcmdpbi1yaWdodDogMTBweDsNCn0NCi52YWx1ZSB7DQogIGNvbG9yOiAjMzAzMTMzOw0KICBmb250LXdlaWdodDogYm9sZDsNCn0NCi5xdWV1ZS1hY3Rpb25zIHsNCiAgbWFyZ2luLXRvcDogMjBweDsNCn0NCi5jYW5jZWwtb3B0aW9ucyB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgcGFkZGluZzogMjBweDsNCn0NCi5jYW5jZWwtb3B0aW9ucyAuZWwtYnV0dG9uIHsNCiAgbWFyZ2luOiAxMHB4Ow0KfQ0KLm5vLXJlcXVlc3QtY29udGVudCB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgZm9udC1zaXplOiAxNnB4Ow0KICBwYWRkaW5nOiAyMHB4Ow0KfQ0KLmNoYXJnaW5nLXByb2dyZXNzIHsNCiAgbWFyZ2luLXRvcDogMTBweDsNCn0NCi5wcm9ncmVzcy1jb250YWluZXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KLnByb2dyZXNzLXN0YXR1cyB7DQogIG1hcmdpbi1sZWZ0OiAxMHB4Ow0KfQ0KLnByb2dyZXNzLWNvbnRhaW5lciB7DQogIHdpZHRoOiAxMDAlOyAvKiDnoa7kv53mnInlrr3luqYgKi8NCn0NCg=="},{"version":3,"sources":["QueueStatus.vue"],"names":[],"mappings":";AAoiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"QueueStatus.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"queue-status-container\">\r\n    <el-card v-if=\"queueInfo\">\r\n      <div slot=\"header\">\r\n        <span>排队状态</span>\r\n      </div>\r\n      \r\n      <div class=\"queue-info\">\r\n        <div class=\"queue-number\">\r\n          <h3>您的排队号码</h3>\r\n          <div class=\"number\">{{ queueInfo.queueNumber }}</div>\r\n        </div>\r\n        \r\n        <el-divider></el-divider>\r\n        \r\n        <div class=\"queue-details\">\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">充电模式：</span>\r\n            <span class=\"value\">{{ queueInfo.mode === 'FAST' ? '快充' : '慢充' }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">充电量：</span>\r\n            <span class=\"value\">{{ queueInfo.amount }}度</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">充电桩：</span>\r\n            <span class=\"value\">{{ queueInfo.chargingPileId || '未分配' }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">状态：</span>\r\n            <span class=\"value\">\r\n              <el-tag :type=\"getStatusType(queueInfo.status)\">\r\n                {{ getStatusText(queueInfo.status) }}\r\n              </el-tag>\r\n            </span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">排队时间：</span>\r\n            <span class=\"value\">{{ formatDateTime(queueInfo.queueJoinTime) }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">请求时间：</span>\r\n            <span class=\"value\">{{ formatDateTime(queueInfo.requestTime) }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">开始充电时间：</span>\r\n            <span class=\"value\">{{ queueInfo.chargingStartTime ? formatDateTime(queueInfo.chargingStartTime) : '未开始' }}</span>\r\n          </div>\r\n          <div class=\"detail-item\">\r\n            <span class=\"label\">前车等待数量：</span>\r\n            <span class=\"value\">{{ queueInfo.waitingCount }}辆</span>\r\n          </div>\r\n          <!-- 充电进度 -->\r\n          <div v-if=\"queueInfo.status === 'CHARGING'\" class=\"detail-item charging-progress\">\r\n            <span class=\"label\">充电进度：</span>\r\n            <div class=\"progress-container\">\r\n              <el-progress \r\n                :percentage=\"parseFloat(chargingProgress.percentage)\" \r\n                status=\"success\"\r\n                :format=\"percentageFormat\"\r\n                style=\"color: black;width: 200px; height: 20px;\">\r\n                <!-- 搞了半天居然是width和height的原因？！ -->\r\n              </el-progress>\r\n              <div class=\"progress-status\">\r\n                <span>充电进度：{{ chargingProgress.percentage }}% </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <el-divider></el-divider>\r\n        \r\n        <div class=\"queue-actions\">\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"goToChargingRequest\"\r\n            :disabled=\"!canModifyRequest\">\r\n            修改请求\r\n          </el-button>\r\n          <el-button\r\n            type=\"danger\" \r\n            @click=\"changeQueue\" \r\n            :disabled=\"queueInfo.status === 'CHARGING'\">\r\n          重新排队\r\n          </el-button>\r\n          <el-button \r\n            type=\"success\" \r\n            @click=\"handleFinishCharging\">\r\n            取消充电\r\n          </el-button>\r\n          <el-button type=\"success\" @click=\"getWaitingQueue\">\r\n            查看等候区排队\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n    \r\n    <el-empty v-else description=\"暂无排队信息\">\r\n      <el-button type=\"primary\" @click=\"goToChargingRequestPage\">\r\n        去提交充电请求\r\n      </el-button>\r\n    </el-empty>\r\n\r\n    <!-- 添加排队情况表格对话框 -->\r\n    <el-dialog\r\n      title=\"当前排队情况\"\r\n      :visible.sync=\"dialogVisible\"\r\n      width=\"70%\">\r\n      <el-table\r\n        :data=\"waitingQueueData\"\r\n        style=\"width: 100%\">\r\n        <el-table-column\r\n          prop=\"userId\"\r\n          label=\"用户ID\"\r\n          width=\"100\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"queueNumber\"\r\n          label=\"排队号码\"\r\n          width=\"120\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"mode\"\r\n          label=\"充电模式\"\r\n          width=\"120\">\r\n          <template slot-scope=\"scope\">\r\n            {{ scope.row.mode === 'FAST' ? '快充' : '慢充' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"amount\"\r\n          label=\"充电量(kWh)\"\r\n          width=\"120\">\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"queueJoinTime\"\r\n          label=\"排队时间\"\r\n          width=\"180\">\r\n          <template slot-scope=\"scope\">\r\n            {{ formatDateTime(scope.row.queueJoinTime) }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column\r\n          prop=\"status\"\r\n          label=\"状态\"\r\n          width=\"120\">\r\n          <template slot-scope=\"scope\">\r\n            {{ getStatusText(scope.row.status) }}\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-dialog>\r\n\r\n    <!-- 修改充电请求对话框 -->\r\n    <el-dialog\r\n      title=\"修改充电请求\"\r\n      :visible.sync=\"modifyDialogVisible\"\r\n      width=\"30%\">\r\n      <el-form :model=\"modifyForm\" label-width=\"100px\">\r\n        <el-form-item label=\"充电模式\" v-if=\"canModifyMode\">\r\n          <el-select v-model=\"modifyForm.mode\" placeholder=\"请选择充电模式\">\r\n            <el-option\r\n              v-for=\"item in modeOptions\"\r\n              :key=\"item.value\"\r\n              :label=\"item.label\"\r\n              :value=\"item.value\">\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"充电量(度)\">\r\n          <el-input-number \r\n            v-model=\"modifyForm.amount\" \r\n            :min=\"0\" \r\n            :precision=\"1\"\r\n            :step=\"0.5\">\r\n          </el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"modifyDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleModify\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getQueueNumber, \r\n  getWaitingQueue, \r\n  getAheadNumber, \r\n  modifyChargingMode, \r\n  modifyChargingAmount,\r\n  cancelAndLeave,\r\n  getUserRequests,\r\n  submitChargingRequest,\r\n  finishCharging,\r\n  getChargingPower,\r\n  cancelAndRequeue\r\n} from '@/api/schedule'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'QueueStatus',\r\n  data() {\r\n    return {\r\n      queueInfo: {\r\n        mode:'',\r\n        waitingCount: 0,\r\n        queueNumber: '',\r\n        amount: 0\r\n      },\r\n      timer: null,\r\n      progressTimer: null,\r\n      chargingProgress: {\r\n        percentage: '0',\r\n        status: 'UNSTART'\r\n      },\r\n      dialogVisible: false,\r\n      waitingQueueData: [],\r\n      modifyDialogVisible: false,\r\n      modifyForm: {\r\n        mode: '',\r\n        amount: 0\r\n      },\r\n      modeOptions: [\r\n        { label: '快充', value: 'FAST' },\r\n        { label: '慢充', value: 'SLOW' }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['userId']),\r\n    // 判断是否可以修改请求\r\n    canModifyRequest() {\r\n      if (!this.queueInfo) return false\r\n      return this.queueInfo.status === 'WAITING_IN_WAITING_AREA'\r\n    },\r\n    // 判断是否可以修改充电模式\r\n    canModifyMode() {\r\n      if (!this.queueInfo) return false\r\n      return this.queueInfo.status === 'WAITING_IN_WAITING_AREA'\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchQueueInfo()\r\n    // 每1秒刷新一次排队信息\r\n    this.timer = setInterval(this.fetchQueueInfo, 1000)\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n    if (this.progressTimer) {\r\n      clearInterval(this.progressTimer)\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchQueueInfo() {\r\n      // 不再使用try-catch包裹整个方法，避免API错误被自动转为消息提示\r\n      if (!this.userId) {\r\n        return\r\n      }\r\n      \r\n      // 创建一个不会触发全局错误处理的请求版本\r\n      const fetchRequestsSafely = async () => {\r\n        try {\r\n          const response = await getUserRequests(this.userId)\r\n          return { success: true, data: response }\r\n        } catch (error) {\r\n          return { success: false, error }\r\n        }\r\n      }\r\n      \r\n      // 安全地获取请求列表\r\n      const result = await fetchRequestsSafely()\r\n      \r\n      // 处理成功响应\r\n      if (result.success && result.data.code === 200 && result.data.data && result.data.data.length > 0) {\r\n        // 获取最新的请求（id最大的）\r\n        const latestRequest = result.data.data.reduce((prev, current) => \r\n          (prev.id > current.id) ? prev : current\r\n        )\r\n        \r\n        // 检查关键字段是否发生变化，而不仅仅是ID\r\n        const isStatusChanged = !this.queueInfo || \r\n                               this.queueInfo.id !== latestRequest.id || \r\n                               this.queueInfo.status !== latestRequest.status ||\r\n                               this.queueInfo.amount !== latestRequest.amount ||\r\n                               this.queueInfo.chargingPileId !== latestRequest.chargingPileId ||\r\n                               this.queueInfo.chargingStartTime !== latestRequest.chargingStartTime;\r\n        \r\n        // 如果关键字段发生变化，则更新整个queueInfo\r\n        if (isStatusChanged) {\r\n          // 保存之前的waitingCount值，避免被重置为0后需要等待新请求\r\n          const prevWaitingCount = this.queueInfo ? this.queueInfo.waitingCount : 0;\r\n          \r\n          this.queueInfo = {\r\n            ...latestRequest,\r\n            waitingCount: prevWaitingCount\r\n          }\r\n          \r\n          // 如果状态是充电中，开始获取充电进度\r\n          if (latestRequest.status === 'CHARGING') {\r\n            // 清除之前的定时器并创建新的\r\n            if (this.progressTimer) {\r\n              clearInterval(this.progressTimer)\r\n            }\r\n            this.fetchChargingProgress() // 立即获取一次\r\n            this.progressTimer = setInterval(this.fetchChargingProgress, 1000) // 每1秒更新一次\r\n          } else {\r\n            // 如果不是充电中状态，清除进度定时器\r\n            if (this.progressTimer) {\r\n              clearInterval(this.progressTimer)\r\n              this.progressTimer = null\r\n            }\r\n          }\r\n        }\r\n        \r\n        // 无论关键状态是否变化，都更新waitingCount\r\n        // 只在状态为等待时才获取前车等待数量\r\n        if (latestRequest.status === 'WAITING_IN_WAITING_AREA' || \r\n            latestRequest.status === 'WAITING_IN_CHARGING_AREA') {\r\n          // 安全获取前车等待数量\r\n          const fetchAheadNumberSafely = async () => {\r\n            try {\r\n              const response = await getAheadNumber(this.userId)\r\n              return { success: true, data: response }\r\n            } catch (error) {\r\n              return { success: false, error }\r\n            }\r\n          }\r\n          \r\n          const aheadResult = await fetchAheadNumberSafely()\r\n          if (aheadResult.success && aheadResult.data.code === 200) {\r\n            // 直接更新waitingCount，保证即使其他字段没变化，waitingCount也能更新\r\n            if (this.queueInfo) {\r\n              this.queueInfo.waitingCount = aheadResult.data.data\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 处理请求失败或没有记录的情况\r\n        this.queueInfo = null\r\n        // 清除进度定时器\r\n        if (this.progressTimer) {\r\n          clearInterval(this.progressTimer)\r\n          this.progressTimer = null\r\n        }\r\n      }\r\n    },\r\n    goToChargingRequest() {\r\n      if (!this.canModifyRequest) {\r\n        this.$message.warning('当前状态不允许修改请求')\r\n        return\r\n      }\r\n      this.modifyDialogVisible = true\r\n      // 初始化表单数据\r\n      this.modifyForm = {\r\n        mode: this.queueInfo.mode,\r\n        amount: this.queueInfo.amount\r\n      }\r\n    },\r\n    \r\n    goToChargingRequestPage() {\r\n      this.$router.push('/charging-request')\r\n    },\r\n    \r\n    async getWaitingQueue() {\r\n      try {\r\n        const response = await getWaitingQueue()\r\n        if (response.code === 200) {\r\n          this.waitingQueueData = response.data\r\n          this.dialogVisible = true\r\n        } else {\r\n          this.$message.error(response.message || '获取排队情况失败')\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('获取排队情况失败：' + error.message)\r\n      }\r\n    },\r\n    \r\n    async changeQueue() {\r\n      try {\r\n        // 根据当前状态调用不同的接口\r\n        if (this.queueInfo.status === 'CHARGING') {\r\n          // 如果是充电状态，先结束充电再重新排队\r\n          const finishResponse = await finishCharging(this.userId);\r\n          if (finishResponse.code !== 200) {\r\n            this.$message.error(finishResponse.message || '结束充电失败');\r\n            return;\r\n          }\r\n          \r\n          // 结束充电成功后，再重新排队\r\n          const requeueResponse = await cancelAndRequeue(this.userId);\r\n          if (requeueResponse.code === 200) {\r\n            this.$message.success('已结束充电并重新排队');\r\n            this.fetchQueueInfo(); // 刷新状态\r\n          } else {\r\n            this.$message.error(requeueResponse.message || '重新排队失败');\r\n          }\r\n        } else if (this.queueInfo.status === 'WAITING_IN_CHARGING_AREA') {\r\n          // 如果是充电区等待状态，直接重新排队\r\n          const requeueResponse = await cancelAndRequeue(this.userId);\r\n          if (requeueResponse.code === 200) {\r\n            this.$message.success('已取消当前请求并重新排队');\r\n            this.fetchQueueInfo(); // 刷新状态\r\n          } else {\r\n            this.$message.error(requeueResponse.message || '重新排队失败');\r\n          }\r\n        } else {\r\n          this.$message.warning('当前状态无法执行此操作');\r\n        }\r\n      } catch (error) {\r\n        console.log('操作失败：', error.message);\r\n      }\r\n    },\r\n    formatDateTime(dateTimeStr) {\r\n      if (!dateTimeStr) return ''\r\n      const date = new Date(dateTimeStr)\r\n      return date.toLocaleString()\r\n    },\r\n    getStatusText(status) {\r\n      const statusMap = {\r\n        'WAITING_IN_WAITING_AREA': '等候区等待',\r\n        'WAITING_IN_CHARGING_AREA': '充电区等待',\r\n        'CHARGING': '充电中',\r\n        'COMPLETED': '已完成',\r\n        'CANCELED': '已取消'\r\n      }\r\n      return statusMap[status] || status\r\n    },\r\n    getStatusType(status) {\r\n      const typeMap = {\r\n        'WAITING_IN_WAITING_AREA': 'warning',\r\n        'WAITING_IN_CHARGING_AREA': 'info',\r\n        'CHARGING': 'success',\r\n        'COMPLETED': '',\r\n        'CANCELED': 'danger'\r\n      }\r\n      return typeMap[status] || ''\r\n    },\r\n    async handleModify() {\r\n      try {\r\n        // 修改充电模式\r\n        if (this.canModifyMode && this.modifyForm.mode !== this.queueInfo.mode) {\r\n          const modeResponse = await modifyChargingMode({\r\n            userId: this.userId,\r\n            mode: this.modifyForm.mode\r\n          })\r\n          if (modeResponse.code === 200) {\r\n            this.$message.success('充电模式修改成功')\r\n          } else {\r\n            this.$message.error(modeResponse.message || '充电模式修改失败')\r\n            return\r\n          }\r\n        }\r\n\r\n        // 修改充电量\r\n        if (this.modifyForm.amount !== this.queueInfo.amount) {\r\n          const amountResponse = await modifyChargingAmount({\r\n            userId: this.userId,\r\n            requestAmount: this.modifyForm.amount\r\n          })\r\n          if (amountResponse.code === 200) {\r\n            this.$message.success('充电量修改成功')\r\n          } else {\r\n            this.$message.error(amountResponse.message || '充电量修改失败')\r\n            return\r\n          }\r\n        }\r\n\r\n        this.modifyDialogVisible = false\r\n        this.fetchQueueInfo() // 刷新状态\r\n      } catch (error) {\r\n        this.$message.error('修改失败：' + error.message)\r\n      }\r\n    },\r\n    async handleFinishCharging() {\r\n      try {\r\n        // 根据当前状态调用不同的接口\r\n        let response;\r\n        if (this.queueInfo.status === 'WAITING_IN_WAITING_AREA'|| this.queueInfo.status === 'WAITING_IN_CHARGING_AREA') {\r\n          // 等待状态调用取消并离开接口\r\n          response = await cancelAndLeave(this.userId);\r\n          if (response.code === 200) {\r\n            this.$message.success('已取消充电并离开系统');\r\n            this.queueInfo = null;\r\n          } else {\r\n            this.$message.error(response.message || '取消失败');\r\n          }\r\n        } else if (this.queueInfo.status === 'CHARGING') {\r\n          // 充电状态调用结束充电接口\r\n          response = await finishCharging(this.userId);\r\n          if (response.code === 200) {\r\n            this.$message.success('充电结束');\r\n            this.fetchQueueInfo(); // 刷新状态\r\n          } else {\r\n            this.$message.error(response.message || '结束充电失败');\r\n          }\r\n        } else {\r\n          this.$message.warning('当前状态无法执行此操作');\r\n        }\r\n      } catch (error) {\r\n        this.$message.error('操作失败：' + error.message);\r\n      }\r\n    },\r\n    // 充电进度百分比格式化\r\n    percentageFormat(percentage) {\r\n      return percentage + '%'\r\n    },\r\n    \r\n    \r\n    // 获取充电状态文本\r\n    getChargingStatusText(status) {\r\n      const statusMap = {\r\n        'CHARGING': '充电中',\r\n        'UNSTART': '未开始',\r\n        'FAULTED': '故障中',\r\n        'COMPLETED': '已完成'\r\n      }\r\n      return statusMap[status] || status\r\n    },\r\n    \r\n    // 获取充电进度\r\n    async fetchChargingProgress() {\r\n      if (!this.queueInfo || !this.queueInfo.id || this.queueInfo.status !== 'CHARGING') {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const response = await getChargingPower(this.queueInfo.id)\r\n        if (response.code === 200) {\r\n          this.chargingProgress = response.data\r\n          // this.chargingProgress.percentage = response.data.percentage\r\n          // this.chargingProgress.status = response.data.status\r\n          console.log(this.chargingProgress.percentage)\r\n          console.log(typeof this.chargingProgress.percentage);\r\n        }\r\n      } catch (error) {\r\n        console.error('获取充电进度失败:', error)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.queue-status-container {\r\n  padding: 20px;\r\n}\r\n.queue-info {\r\n  text-align: center;\r\n}\r\n.queue-number {\r\n  margin-bottom: 20px;\r\n}\r\n.number {\r\n  font-size: 48px;\r\n  font-weight: bold;\r\n  color: #409EFF;\r\n  margin: 20px 0;\r\n}\r\n.queue-details {\r\n  text-align: left;\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n}\r\n.detail-item {\r\n  margin: 15px 0;\r\n  font-size: 16px;\r\n}\r\n.label {\r\n  color: #606266;\r\n  margin-right: 10px;\r\n}\r\n.value {\r\n  color: #303133;\r\n  font-weight: bold;\r\n}\r\n.queue-actions {\r\n  margin-top: 20px;\r\n}\r\n.cancel-options {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n.cancel-options .el-button {\r\n  margin: 10px;\r\n}\r\n.no-request-content {\r\n  text-align: center;\r\n  font-size: 16px;\r\n  padding: 20px;\r\n}\r\n.charging-progress {\r\n  margin-top: 10px;\r\n}\r\n.progress-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.progress-status {\r\n  margin-left: 10px;\r\n}\r\n.progress-container {\r\n  width: 100%; /* 确保有宽度 */\r\n}\r\n</style> "]}]}