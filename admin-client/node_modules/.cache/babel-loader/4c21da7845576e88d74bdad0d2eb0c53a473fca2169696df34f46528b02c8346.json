{"ast":null,"code":"import { getAllChargingPiles, getAllPileQueueInfo, getChargingQueueDetails } from '@/api/charge-pile';\nexport default {\n  name: 'ChargingQueue',\n  data() {\n    return {\n      loading: false,\n      chargingPiles: [],\n      // 所有充电桩\n      selectedPileId: 'all',\n      // 默认显示所有充电桩\n      queueInfo: {},\n      // 所有充电桩的队列信息\n      queueDetails: [],\n      // 单个充电桩的队列详细信息\n      pilesStatus: {} // 充电桩状态信息\n    };\n  },\n  methods: {\n    // 获取所有充电桩信息\n    async fetchAllChargingPiles() {\n      try {\n        const response = await getAllChargingPiles();\n        if (response.code === 200) {\n          this.chargingPiles = response.data;\n          // 创建充电桩状态映射\n          this.chargingPiles.forEach(pile => {\n            this.pilesStatus[pile.id] = pile.status;\n          });\n        } else {\n          this.$message.error(response.message || '获取充电桩列表失败');\n        }\n      } catch (error) {\n        console.error('获取充电桩列表出错：', error);\n        this.$message.error('获取充电桩列表失败：' + error.message);\n      }\n    },\n    // 获取所有充电桩的队列信息\n    async fetchAllPileQueueInfo() {\n      this.loading = true;\n      try {\n        const response = await getAllPileQueueInfo();\n        if (response.code === 200) {\n          this.queueInfo = response.data;\n        } else {\n          this.$message.error(response.message || '获取队列信息失败');\n        }\n      } catch (error) {\n        console.error('获取队列信息出错：', error);\n        this.$message.error('获取队列信息失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 获取单个充电桩的队列详细信息\n    async fetchChargingQueueDetails(pileId) {\n      this.loading = true;\n      try {\n        const response = await getChargingQueueDetails(pileId);\n        if (response.code === 200) {\n          this.queueDetails = response.data;\n        } else {\n          this.$message.error(response.message || '获取队列详情失败');\n        }\n      } catch (error) {\n        console.error('获取队列详情出错：', error);\n        this.$message.error('获取队列详情失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 处理充电桩选择变化\n    handlePileChange(pileId) {\n      if (pileId === 'all') {\n        this.fetchAllPileQueueInfo();\n      } else {\n        this.fetchChargingQueueDetails(pileId);\n      }\n    },\n    // 计算排队时长\n    calculateWaitingDuration(queueJoinTime) {\n      if (!queueJoinTime) return '未知';\n      const joinTime = new Date(queueJoinTime);\n      const now = new Date();\n      const diffMs = now - joinTime;\n\n      // 计算时分秒\n      const hours = Math.floor(diffMs / (1000 * 60 * 60));\n      const minutes = Math.floor(diffMs % (1000 * 60 * 60) / (1000 * 60));\n      const seconds = Math.floor(diffMs % (1000 * 60) / 1000);\n      return `${hours}小时${minutes}分钟${seconds}秒`;\n    },\n    // 格式化日期时间\n    formatDateTime(dateTimeStr) {\n      if (!dateTimeStr) return '未知';\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    },\n    // 获取充电桩状态类型\n    getPileStatusType(pileId) {\n      const status = this.pilesStatus[pileId];\n      const types = {\n        'AVAILABLE': 'success',\n        'IN_USE': 'warning',\n        'MAINTENANCE': 'info',\n        'FAULT': 'danger',\n        'OFFLINE': 'info'\n      };\n      return types[status] || 'info';\n    },\n    // 获取充电桩状态文本\n    getPileStatusText(pileId) {\n      const status = this.pilesStatus[pileId];\n      const texts = {\n        'AVAILABLE': '空闲',\n        'IN_USE': '使用中',\n        'MAINTENANCE': '维护中',\n        'FAULT': '故障',\n        'OFFLINE': '离线'\n      };\n      return texts[status] || '未知';\n    },\n    // 初始化数据\n    async initData() {\n      await this.fetchAllChargingPiles();\n      this.fetchAllPileQueueInfo();\n    }\n  },\n  created() {\n    this.initData();\n  }\n};","map":{"version":3,"names":["getAllChargingPiles","getAllPileQueueInfo","getChargingQueueDetails","name","data","loading","chargingPiles","selectedPileId","queueInfo","queueDetails","pilesStatus","methods","fetchAllChargingPiles","response","code","forEach","pile","id","status","$message","error","message","console","fetchAllPileQueueInfo","fetchChargingQueueDetails","pileId","handlePileChange","calculateWaitingDuration","queueJoinTime","joinTime","Date","now","diffMs","hours","Math","floor","minutes","seconds","formatDateTime","dateTimeStr","date","toLocaleString","year","month","day","hour","minute","second","hour12","getPileStatusType","types","getPileStatusText","texts","initData","created"],"sources":["src/views/ChargingQueue.vue"],"sourcesContent":["<template>\r\n  <div class=\"charging-queue-container\">\r\n    <el-card>\r\n      <div slot=\"header\">\r\n        <span>充电桩等候服务车辆信息</span>\r\n        <el-select v-model=\"selectedPileId\" placeholder=\"选择充电桩\" style=\"float: right; width: 180px\" @change=\"handlePileChange\">\r\n          <el-option label=\"全部充电桩\" value=\"all\"></el-option>\r\n          <el-option v-for=\"pile in chargingPiles\" :key=\"pile.id\" :label=\"pile.id\" :value=\"pile.id\"></el-option>\r\n        </el-select>\r\n      </div>\r\n      \r\n      <div v-if=\"loading\" class=\"loading-container\">\r\n        <el-skeleton :rows=\"6\" animated />\r\n      </div>\r\n      \r\n      <div v-else>\r\n        <div v-if=\"selectedPileId === 'all'\">\r\n          <!-- 显示所有充电桩的队列信息 -->\r\n          <div v-for=\"(queueList, pileId) in queueInfo\" :key=\"pileId\" class=\"pile-queue-section\">\r\n            <div class=\"pile-header\">\r\n              <h3>充电桩: {{ pileId }}</h3>\r\n              <el-tag :type=\"getPileStatusType(pileId)\" size=\"small\">{{ getPileStatusText(pileId) }}</el-tag>\r\n            </div>\r\n            \r\n            <el-table v-if=\"queueList && queueList.length > 0\" :data=\"queueList\" border stripe size=\"small\">\r\n              <el-table-column prop=\"userId\" label=\"用户ID\" width=\"100\"></el-table-column>\r\n              <el-table-column prop=\"batteryCapacity\" label=\"电池容量(度)\" width=\"120\"></el-table-column>\r\n              <el-table-column prop=\"requestAmount\" label=\"请求充电量(度)\" width=\"130\"></el-table-column>\r\n              <el-table-column prop=\"queuePosition\" label=\"队列位置\" width=\"100\"></el-table-column>\r\n              <el-table-column label=\"排队时长\" width=\"180\">\r\n                <template slot-scope=\"scope\">\r\n                  {{ calculateWaitingDuration(scope.row.queueJoinTime) }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"carNumber\" label=\"车牌号\" width=\"120\"></el-table-column>\r\n            </el-table>\r\n            <el-empty v-else description=\"暂无等候车辆\"></el-empty>\r\n          </div>\r\n        </div>\r\n        <div v-else>\r\n          <!-- 显示单个充电桩的队列详细信息 -->\r\n          <el-table v-if=\"queueDetails && queueDetails.length > 0\" :data=\"queueDetails\" border>\r\n            <el-table-column prop=\"userId\" label=\"用户ID\" width=\"100\"></el-table-column>\r\n            <el-table-column prop=\"batteryCapacity\" label=\"电池容量(度)\" width=\"120\"></el-table-column>\r\n            <el-table-column prop=\"requestAmount\" label=\"请求充电量(度)\" width=\"130\"></el-table-column>\r\n            <el-table-column prop=\"queuePosition\" label=\"队列位置\" width=\"100\"></el-table-column>\r\n            <el-table-column label=\"排队时长\" width=\"180\">\r\n              <template slot-scope=\"scope\">\r\n                {{ calculateWaitingDuration(scope.row.queueJoinTime) }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column label=\"加入队列时间\" width=\"180\">\r\n              <template slot-scope=\"scope\">\r\n                {{ formatDateTime(scope.row.queueJoinTime) }}\r\n              </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"carNumber\" label=\"车牌号\" width=\"120\"></el-table-column>\r\n            <el-table-column prop=\"waitingTime\" label=\"预计等待时间(分钟)\" width=\"150\"></el-table-column>\r\n          </el-table>\r\n          <el-empty v-else description=\"暂无等候车辆\"></el-empty>\r\n        </div>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getAllChargingPiles, getAllPileQueueInfo, getChargingQueueDetails } from '@/api/charge-pile'\r\n\r\nexport default {\r\n  name: 'ChargingQueue',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      chargingPiles: [], // 所有充电桩\r\n      selectedPileId: 'all', // 默认显示所有充电桩\r\n      queueInfo: {}, // 所有充电桩的队列信息\r\n      queueDetails: [], // 单个充电桩的队列详细信息\r\n      pilesStatus: {} // 充电桩状态信息\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取所有充电桩信息\r\n    async fetchAllChargingPiles() {\r\n      try {\r\n        const response = await getAllChargingPiles()\r\n        if (response.code === 200) {\r\n          this.chargingPiles = response.data\r\n          // 创建充电桩状态映射\r\n          this.chargingPiles.forEach(pile => {\r\n            this.pilesStatus[pile.id] = pile.status\r\n          })\r\n        } else {\r\n          this.$message.error(response.message || '获取充电桩列表失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取充电桩列表出错：', error)\r\n        this.$message.error('获取充电桩列表失败：' + error.message)\r\n      }\r\n    },\r\n    \r\n    // 获取所有充电桩的队列信息\r\n    async fetchAllPileQueueInfo() {\r\n      this.loading = true\r\n      try {\r\n        const response = await getAllPileQueueInfo()\r\n        if (response.code === 200) {\r\n          this.queueInfo = response.data\r\n        } else {\r\n          this.$message.error(response.message || '获取队列信息失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取队列信息出错：', error)\r\n        this.$message.error('获取队列信息失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    // 获取单个充电桩的队列详细信息\r\n    async fetchChargingQueueDetails(pileId) {\r\n      this.loading = true\r\n      try {\r\n        const response = await getChargingQueueDetails(pileId)\r\n        if (response.code === 200) {\r\n          this.queueDetails = response.data\r\n        } else {\r\n          this.$message.error(response.message || '获取队列详情失败')\r\n        }\r\n      } catch (error) {\r\n        console.error('获取队列详情出错：', error)\r\n        this.$message.error('获取队列详情失败：' + error.message)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    // 处理充电桩选择变化\r\n    handlePileChange(pileId) {\r\n      if (pileId === 'all') {\r\n        this.fetchAllPileQueueInfo()\r\n      } else {\r\n        this.fetchChargingQueueDetails(pileId)\r\n      }\r\n    },\r\n    \r\n    // 计算排队时长\r\n    calculateWaitingDuration(queueJoinTime) {\r\n      if (!queueJoinTime) return '未知'\r\n      \r\n      const joinTime = new Date(queueJoinTime)\r\n      const now = new Date()\r\n      const diffMs = now - joinTime\r\n      \r\n      // 计算时分秒\r\n      const hours = Math.floor(diffMs / (1000 * 60 * 60))\r\n      const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60))\r\n      const seconds = Math.floor((diffMs % (1000 * 60)) / 1000)\r\n      \r\n      return `${hours}小时${minutes}分钟${seconds}秒`\r\n    },\r\n    \r\n    // 格式化日期时间\r\n    formatDateTime(dateTimeStr) {\r\n      if (!dateTimeStr) return '未知'\r\n      \r\n      const date = new Date(dateTimeStr)\r\n      return date.toLocaleString('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false\r\n      })\r\n    },\r\n    \r\n    // 获取充电桩状态类型\r\n    getPileStatusType(pileId) {\r\n      const status = this.pilesStatus[pileId]\r\n      const types = {\r\n        'AVAILABLE': 'success',\r\n        'IN_USE': 'warning',\r\n        'MAINTENANCE': 'info',\r\n        'FAULT': 'danger',\r\n        'OFFLINE': 'info'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    \r\n    // 获取充电桩状态文本\r\n    getPileStatusText(pileId) {\r\n      const status = this.pilesStatus[pileId]\r\n      const texts = {\r\n        'AVAILABLE': '空闲',\r\n        'IN_USE': '使用中',\r\n        'MAINTENANCE': '维护中',\r\n        'FAULT': '故障',\r\n        'OFFLINE': '离线'\r\n      }\r\n      return texts[status] || '未知'\r\n    },\r\n    \r\n    // 初始化数据\r\n    async initData() {\r\n      await this.fetchAllChargingPiles()\r\n      this.fetchAllPileQueueInfo()\r\n    }\r\n  },\r\n  created() {\r\n    this.initData()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.charging-queue-container {\r\n  padding: 20px;\r\n}\r\n\r\n.loading-container {\r\n  padding: 20px 0;\r\n}\r\n\r\n.pile-queue-section {\r\n  margin-bottom: 20px;\r\n  padding-bottom: 20px;\r\n  border-bottom: 1px dashed #eee;\r\n}\r\n\r\n.pile-queue-section:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.pile-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.pile-header h3 {\r\n  margin: 0;\r\n  margin-right: 10px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}