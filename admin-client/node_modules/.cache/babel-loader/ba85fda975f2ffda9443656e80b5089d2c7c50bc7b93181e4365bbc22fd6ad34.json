{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'localhost:8080',\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  // 例如：添加token\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果返回的状态码不是200，说明接口请求有误\n  if (res.code !== 200) {\n    Message({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.code === 401) {\n      // 可以在这里处理登出逻辑\n      // store.dispatch('user/resetToken').then(() => {\n      //   location.reload()\n      // })\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.log('err' + error);\n  Message({\n    message: error.message || '请求失败',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Message","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","console","log","Promise","reject","response","res","data","code","message","type","duration","Error"],"sources":["D:/git_project/ChargingSystem/admin-client/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { Message } from 'element-ui'\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n  baseURL: 'localhost:8080', \r\n  timeout: 5000 // 请求超时时间\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    // 例如：添加token\r\n    const token = localStorage.getItem('token')\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // 对请求错误做些什么\r\n    console.log(error)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    const res = response.data\r\n\r\n    // 如果返回的状态码不是200，说明接口请求有误\r\n    if (res.code !== 200) {\r\n      Message({\r\n        message: res.message || '请求失败',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n\r\n      // 401: 未登录或token过期\r\n      if (res.code === 401) {\r\n        // 可以在这里处理登出逻辑\r\n        // store.dispatch('user/resetToken').then(() => {\r\n        //   location.reload()\r\n        // })\r\n      }\r\n      return Promise.reject(new Error(res.message || '请求失败'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    console.log('err' + error)\r\n    Message({\r\n      message: error.message || '请求失败',\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAE,gBAAgB;EACzBC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC/BW,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpBrB,OAAO,CAAC;MACNsB,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;MACpB;MACA;MACA;MACA;IAAA;IAEF,OAAOL,OAAO,CAACC,MAAM,CAAC,IAAIQ,KAAK,CAACN,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;EACzD,CAAC,MAAM;IACL,OAAOH,GAAG;EACZ;AACF,CAAC,EACDN,KAAK,IAAI;EACPC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC;EAC1Bb,OAAO,CAAC;IACNsB,OAAO,EAAET,KAAK,CAACS,OAAO,IAAI,MAAM;IAChCC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}