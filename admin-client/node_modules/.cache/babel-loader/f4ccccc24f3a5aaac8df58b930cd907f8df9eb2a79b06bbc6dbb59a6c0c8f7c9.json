{"ast":null,"code":"import { getAllChargingPiles, powerOnChargingPile, powerOffChargingPile, setChargingPileParameters, handleChargingPileFault, handleChargingPileRecovery, cancelAndLeave, finishCharging, getChargingQueueDetails } from '@/api/charge-pile';\nexport default {\n  name: 'ChargingPiles',\n  data() {\n    return {\n      loading: false,\n      chargingPiles: [],\n      dialogVisible: false,\n      dialogTitle: '',\n      form: {\n        pileId: '',\n        chargingPower: 0\n      },\n      selectedPile: {},\n      // 用于存储当前选中的充电桩完整信息\n      rules: {\n        chargingPower: [{\n          required: true,\n          message: '请输入充电功率',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          min: 0,\n          message: '充电功率必须大于0',\n          trigger: 'blur'\n        }]\n      },\n      submitting: false,\n      // 添加故障处理策略选项\n      strategyOptions: [{\n        value: 'PRIORITY',\n        label: '优先级调度'\n      }, {\n        value: 'TIME_ORDER',\n        label: '时间顺序调度'\n      }],\n      selectedStrategy: 'TIME_ORDER',\n      // 添加定时刷新相关属性\n      timer: null,\n      refreshInterval: 2000 // 调整为2秒刷新一次\n    };\n  },\n  methods: {\n    getStatusType(status) {\n      const types = {\n        'AVAILABLE': 'success',\n        'IN_USE': 'warning',\n        'MAINTENANCE': 'info',\n        'FAULT': 'danger',\n        'OFFLINE': 'info'\n      };\n      return types[status] || 'info';\n    },\n    getStatusText(status) {\n      const texts = {\n        'AVAILABLE': '空闲',\n        'IN_USE': '使用中',\n        'MAINTENANCE': '维护中',\n        'FAULT': '故障',\n        'OFFLINE': '离线'\n      };\n      return texts[status] || '未知';\n    },\n    formatDateTime(dateTimeStr) {\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    },\n    handleAdd() {\n      this.clearTimer(); // 暂停自动刷新\n      this.dialogTitle = '添加充电桩';\n      this.form = {\n        pileId: '',\n        chargingPower: 0\n      };\n      this.dialogVisible = true;\n    },\n    handleEdit(row) {\n      this.clearTimer(); // 暂停自动刷新\n      this.dialogTitle = '编辑充电桩参数';\n      this.selectedPile = {\n        ...row\n      };\n      this.form = {\n        pileId: row.id,\n        chargingPower: row.chargingPower\n      };\n      this.dialogVisible = true;\n    },\n    handleMaintenance(row) {\n      if (row.status === 'FAULT') {\n        // 故障状态转为维护状态\n        this.$confirm('是否开始对该充电桩进行维护？', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }).then(async () => {\n          try {\n            // 调用故障恢复API\n            const response = await handleChargingPileRecovery(row.id);\n            if (response.code === 200) {\n              row.status = 'MAINTENANCE';\n              this.$message.success(response.message || '充电桩已进入维护状态');\n            } else {\n              this.$message.error(response.message || '操作失败');\n            }\n          } catch (error) {\n            console.error('处理充电桩故障恢复出错：', error);\n            this.$message.error('操作失败：' + error.message);\n          }\n        }).catch(err => {\n          if (err !== 'cancel') {\n            console.error('对话框操作出错：', err);\n          }\n        });\n      } else {\n        // 非故障状态转为故障状态，需要选择调度策略\n        this.$alert('', '请选择故障处理的调度策略', {\n          confirmButtonText: '确定',\n          showCancelButton: true,\n          customClass: 'strategy-dialog',\n          beforeClose: (action, instance, done) => {\n            if (action === 'confirm') {\n              // 确认将充电桩标记为故障状态\n              this.handleFaultWithStrategy(row, instance.inputValue);\n            }\n            done();\n          },\n          dangerouslyUseHTMLString: true,\n          message: this.renderStrategySelector()\n        }).catch(err => {\n          if (err !== 'cancel') {\n            console.error('对话框操作出错：', err);\n          }\n        });\n      }\n    },\n    handleToggleStatus(row) {\n      this.clearTimer(); // 暂停自动刷新\n      const newStatus = row.status === 'AVAILABLE' ? 'OFFLINE' : 'AVAILABLE';\n      const action = newStatus === 'AVAILABLE' ? '开启' : '关闭';\n      const apiMethod = newStatus === 'AVAILABLE' ? powerOnChargingPile : powerOffChargingPile;\n      this.$confirm(`确认${action}该充电桩吗？`, '提示', {\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await apiMethod(row.id);\n          if (response.code === 200) {\n            this.$message.success(response.message);\n            // 更新本地状态\n            row.status = newStatus;\n            await this.fetchChargingPiles(); // 立即刷新数据\n          } else {\n            this.$message.error(response.message || `${action}失败`);\n          }\n        } catch (error) {\n          console.error(`${action}充电桩出错：`, error);\n          this.$message.error(`${action}失败：` + error.message);\n        } finally {\n          this.startTimer(); // 重启自动刷新\n        }\n      }).catch(err => {\n        if (err !== 'cancel') {\n          console.error('对话框操作出错：', err);\n        }\n        this.startTimer(); // 重启自动刷新\n      });\n    },\n    handleSubmit() {\n      this.$refs.form.validate(async valid => {\n        if (valid) {\n          this.submitting = true;\n          try {\n            const response = await setChargingPileParameters(this.form);\n            if (response.code === 200) {\n              this.$message.success(response.message);\n              this.dialogVisible = false;\n              // 更新本地数据\n              const pile = this.chargingPiles.find(p => p.id === this.form.pileId);\n              if (pile) {\n                pile.chargingPower = this.form.chargingPower;\n              }\n              this.startTimer(); // 重启自动刷新\n            } else {\n              this.$message.error(response.message || '设置参数失败');\n            }\n          } catch (error) {\n            console.error('设置充电桩参数出错：', error);\n            this.$message.error('设置参数失败：' + error.message);\n          } finally {\n            this.submitting = false;\n          }\n        }\n      });\n    },\n    async fetchChargingPiles() {\n      this.loading = true;\n      try {\n        console.log('开始获取充电桩列表');\n        const response = await getAllChargingPiles();\n        console.log('获取到的响应数据：', response);\n        if (response.code === 200) {\n          this.chargingPiles = response.data;\n          console.log('设置充电桩数据：', this.chargingPiles);\n        } else {\n          this.$message.error(response.message || '获取充电桩列表失败');\n        }\n      } catch (error) {\n        console.error('获取充电桩列表出错：', error);\n        this.$message.error('获取充电桩列表失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 渲染策略选择器的HTML\n    renderStrategySelector() {\n      // 使用DOM方式创建选择器，在mounted后会被挂载\n      return `\n          <div>\n            <p>请选择故障处理的调度策略：</p>\n            <div class=\"el-select-container\" style=\"margin-top: 15px;\">\n              <select id=\"strategySelect\" class=\"el-select\" style=\"width: 100%; height: 36px; border: 1px solid #DCDFE6; border-radius: 4px; padding: 0 15px; color: #606266;\">\n                <option value=\"PRIORITY\">优先级调度</option>\n                <option value=\"TIME_ORDER\" selected>时间顺序调度</option>\n              </select>\n            </div>\n          </div>\n        `;\n    },\n    // 使用选择的策略处理故障\n    async handleFaultWithStrategy(row, strategy) {\n      try {\n        // 获取选择的策略\n        const strategySelect = document.getElementById('strategySelect');\n        const selectedStrategy = strategySelect ? strategySelect.value : 'TIME_ORDER';\n\n        // 调用故障处理API\n        const response = await handleChargingPileFault(row.id, selectedStrategy);\n        if (response.code === 200) {\n          row.status = 'FAULT';\n          this.$message.success(response.message || '充电桩已标记为故障状态');\n        } else {\n          this.$message.error(response.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('处理充电桩故障出错：', error);\n        this.$message.error('操作失败：' + error.message);\n      }\n    },\n    // 添加定时刷新相关方法\n    startTimer() {\n      this.clearTimer(); // 确保先清除可能存在的定时器\n      this.timer = setInterval(() => {\n        if (!this.dialogVisible) {\n          // 只在没有对话框打开时刷新\n          this.fetchChargingPiles();\n        }\n      }, this.refreshInterval);\n    },\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    // 处理结束充电\n    async handleFinishCharging(row) {\n      this.clearTimer(); // 暂停自动刷新\n      try {\n        // 弹窗确认\n        await this.$confirm('确认结束该充电桩的充电会话?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n\n        // 获取当前使用该充电桩的用户ID (示例，实际需根据API调整)\n        const userId = row.currentUserId;\n        if (!userId) {\n          this.$message.error('无法获取当前使用充电桩的用户信息');\n          return;\n        }\n        const response = await finishCharging(userId);\n        if (response.code === 200) {\n          this.$message.success('充电已结束');\n          await this.fetchChargingPiles(); // 刷新数据\n        } else {\n          this.$message.error(response.message || '结束充电失败');\n        }\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('结束充电出错：', error);\n          this.$message.error('操作失败：' + (error.message || error));\n        }\n      } finally {\n        this.startTimer(); // 重启自动刷新\n      }\n    },\n    // 处理取消等候\n    async handleCancelWaiting(row) {\n      this.clearTimer(); // 暂停自动刷新\n\n      try {\n        // 显示用户列表对话框，让管理员选择要取消等候的用户\n        const queueDetails = await this.getQueueUsers(row.id);\n        if (!queueDetails || queueDetails.length === 0) {\n          this.$message.warning('该充电桩无等候用户');\n          return;\n        }\n\n        // 调用对话框让管理员选择用户\n        this.$confirm('请在控制台中查看等待用户列表并输入要取消的用户ID', '选择用户', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          closeOnClickModal: false,\n          showInput: true,\n          inputPlaceholder: '请输入要取消的用户ID'\n        }).then(async ({\n          value\n        }) => {\n          if (!value) {\n            this.$message.warning('请输入用户ID');\n            return;\n          }\n          const userId = value.trim();\n          // 调用取消等候API\n          const response = await cancelAndLeave(userId);\n          if (response.code === 200) {\n            this.$message.success('已取消该用户的等候');\n            await this.fetchChargingPiles(); // 刷新数据\n          } else {\n            this.$message.error(response.message || '取消等候失败');\n          }\n        }).catch(() => {});\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('取消等候出错：', error);\n          this.$message.error('操作失败：' + (error.message || error));\n        }\n      } finally {\n        this.startTimer(); // 重启自动刷新\n      }\n    },\n    // 获取充电桩队列中的用户\n    async getQueueUsers(pileId) {\n      try {\n        const response = await getChargingQueueDetails(pileId);\n        if (response.code === 200 && response.data) {\n          // 在控制台打印用户列表，便于管理员查看\n          console.table(response.data.map(user => ({\n            '用户ID': user.userId,\n            '请求时间': this.formatDateTime(user.requestTime),\n            '充电类型': user.chargingType === 'FAST' ? '快充' : '慢充',\n            '请求电量': user.requestedChargingAmount\n          })));\n          return response.data;\n        }\n        return [];\n      } catch (error) {\n        console.error('获取充电桩等候队列出错：', error);\n        this.$message.error('获取等候队列失败：' + (error.message || error));\n        return [];\n      }\n    }\n  },\n  created() {\n    this.fetchChargingPiles();\n    this.startTimer();\n  },\n  beforeDestroy() {\n    this.clearTimer();\n  }\n};","map":{"version":3,"names":["getAllChargingPiles","powerOnChargingPile","powerOffChargingPile","setChargingPileParameters","handleChargingPileFault","handleChargingPileRecovery","cancelAndLeave","finishCharging","getChargingQueueDetails","name","data","loading","chargingPiles","dialogVisible","dialogTitle","form","pileId","chargingPower","selectedPile","rules","required","message","trigger","type","min","submitting","strategyOptions","value","label","selectedStrategy","timer","refreshInterval","methods","getStatusType","status","types","getStatusText","texts","formatDateTime","dateTimeStr","date","Date","toLocaleString","year","month","day","hour","minute","second","hour12","handleAdd","clearTimer","handleEdit","row","id","handleMaintenance","$confirm","confirmButtonText","cancelButtonText","then","response","code","$message","success","error","console","catch","err","$alert","showCancelButton","customClass","beforeClose","action","instance","done","handleFaultWithStrategy","inputValue","dangerouslyUseHTMLString","renderStrategySelector","handleToggleStatus","newStatus","apiMethod","fetchChargingPiles","startTimer","handleSubmit","$refs","validate","valid","pile","find","p","log","strategy","strategySelect","document","getElementById","setInterval","clearInterval","handleFinishCharging","userId","currentUserId","handleCancelWaiting","queueDetails","getQueueUsers","length","warning","closeOnClickModal","showInput","inputPlaceholder","trim","table","map","user","requestTime","chargingType","requestedChargingAmount","created","beforeDestroy"],"sources":["src/views/ChargingPiles.vue"],"sourcesContent":["<template>\r\n    <div class=\"charging-piles-container\">\r\n      <el-card>\r\n        <div slot=\"header\">\r\n          <span>充电桩管理</span>\r\n          <el-button style=\"float: right\" type=\"primary\" size=\"small\" @click=\"handleAdd\">添加充电桩</el-button>\r\n        </div>\r\n        \r\n        <el-table :data=\"chargingPiles\" v-loading=\"loading\" border>\r\n          <el-table-column prop=\"id\" label=\"充电桩ID\" width=\"100\"></el-table-column>\r\n          <el-table-column prop=\"type\" label=\"类型\" width=\"100\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag :type=\"scope.row.type === 'FAST' ? 'success' : 'info'\">\r\n                {{ scope.row.type === 'FAST' ? '快充' : '慢充' }}\r\n              </el-tag>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\r\n            <template slot-scope=\"scope\">\r\n              <el-tag :type=\"getStatusType(scope.row.status)\">\r\n                {{ getStatusText(scope.row.status) }}\r\n              </el-tag>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"chargingPower\" label=\"功率(kW)\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"chargingTimes\" label=\"累计充电次数\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"totalChargingDuration\" label=\"充电总时长(h)\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"totalChargingAmount\" label=\"充电总电量(kWh)\" width=\"120\"></el-table-column>\r\n          <el-table-column prop=\"updatedAt\" label=\"最后更新时间\" width=\"180\">\r\n            <template slot-scope=\"scope\">\r\n              {{ formatDateTime(scope.row.updatedAt) }}\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column label=\"操作\" width=\"280\">\r\n            <template slot-scope=\"scope\">\r\n              <el-button size=\"mini\" @click=\"handleEdit(scope.row)\" style=\"margin-right: 10px\">编辑</el-button>\r\n              <el-button \r\n                size=\"mini\" \r\n                :type=\"scope.row.status === 'FAULT' ? 'warning' : 'primary'\"\r\n                @click=\"handleMaintenance(scope.row)\" \r\n                style=\"margin-right: 10px\"\r\n              >{{ scope.row.status === 'FAULT' ? '维护' : '故障' }}</el-button>\r\n              <el-button \r\n                size=\"mini\" \r\n                :type=\"scope.row.status === 'AVAILABLE' ? 'danger' : 'success'\"\r\n                @click=\"handleToggleStatus(scope.row)\"\r\n                :disabled=\"scope.row.status === 'FAULT' || scope.row.status === 'MAINTENANCE'\"\r\n              >{{ scope.row.status === 'AVAILABLE' ? '关闭' : '启动' }}</el-button>\r\n              <el-button \r\n                v-if=\"scope.row.status === 'IN_USE'\" \r\n                size=\"mini\" \r\n                type=\"warning\" \r\n                @click=\"handleFinishCharging(scope.row)\"\r\n                style=\"margin-top: 5px\"\r\n              >结束充电</el-button>\r\n              <el-button \r\n                v-if=\"scope.row.status !== 'AVAILABLE' && scope.row.status !== 'OFFLINE' && scope.row.hasWaitingUsers\" \r\n                size=\"mini\" \r\n                type=\"info\" \r\n                @click=\"handleCancelWaiting(scope.row)\"\r\n                style=\"margin-top: 5px\"\r\n              >取消等候</el-button>\r\n            </template>\r\n          </el-table-column>\r\n        </el-table>\r\n      </el-card>\r\n  \r\n      <!-- 添加/编辑充电桩对话框 -->\r\n      <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\r\n        <el-form :model=\"form\" :rules=\"rules\" ref=\"form\" label-width=\"100px\">\r\n          <el-form-item label=\"充电桩ID\">\r\n            <el-input v-model=\"form.pileId\" disabled></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"充电功率(kW)\" prop=\"chargingPower\">\r\n            <el-input-number v-model=\"form.chargingPower\" :min=\"0\" :max=\"100\"></el-input-number>\r\n          </el-form-item>\r\n          <el-form-item v-if=\"dialogTitle === '编辑充电桩参数'\" label=\"当前状态\">\r\n            <el-tag :type=\"getStatusType(selectedPile.status)\">\r\n              {{ getStatusText(selectedPile.status) }}\r\n            </el-tag>\r\n          </el-form-item>\r\n          <el-form-item v-if=\"dialogTitle === '编辑充电桩参数'\" label=\"充电次数\">\r\n            <span>{{ selectedPile.chargingTimes || 0 }}</span>\r\n          </el-form-item>\r\n        </el-form>\r\n        <div slot=\"footer\">\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"handleSubmit\" :loading=\"submitting\">确定</el-button>\r\n        </div>\r\n      </el-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { \r\n    getAllChargingPiles, \r\n    powerOnChargingPile, \r\n    powerOffChargingPile, \r\n    setChargingPileParameters, \r\n    handleChargingPileFault, \r\n    handleChargingPileRecovery,\r\n    cancelAndLeave,\r\n    finishCharging,\r\n    getChargingQueueDetails\r\n  } from '@/api/charge-pile'\r\n\r\n  export default {\r\n    name: 'ChargingPiles',\r\n    data() {\r\n      return {\r\n        loading: false,\r\n        chargingPiles: [],\r\n        dialogVisible: false,\r\n        dialogTitle: '',\r\n        form: {\r\n          pileId: '',\r\n          chargingPower: 0\r\n        },\r\n        selectedPile: {}, // 用于存储当前选中的充电桩完整信息\r\n        rules: {\r\n          chargingPower: [\r\n            { required: true, message: '请输入充电功率', trigger: 'blur' },\r\n            { type: 'number', min: 0, message: '充电功率必须大于0', trigger: 'blur' }\r\n          ]\r\n        },\r\n        submitting: false,\r\n        // 添加故障处理策略选项\r\n        strategyOptions: [\r\n          { value: 'PRIORITY', label: '优先级调度' },\r\n          { value: 'TIME_ORDER', label: '时间顺序调度' }\r\n        ],\r\n        selectedStrategy: 'TIME_ORDER',\r\n        // 添加定时刷新相关属性\r\n        timer: null,\r\n        refreshInterval: 2000 // 调整为2秒刷新一次\r\n      }\r\n    },\r\n    methods: {\r\n      getStatusType(status) {\r\n        const types = {\r\n          'AVAILABLE': 'success',\r\n          'IN_USE': 'warning',\r\n          'MAINTENANCE': 'info',\r\n          'FAULT': 'danger',\r\n          'OFFLINE': 'info'\r\n        }\r\n        return types[status] || 'info'\r\n      },\r\n      getStatusText(status) {\r\n        const texts = {\r\n          'AVAILABLE': '空闲',\r\n          'IN_USE': '使用中',\r\n          'MAINTENANCE': '维护中',\r\n          'FAULT': '故障',\r\n          'OFFLINE': '离线'\r\n        }\r\n        return texts[status] || '未知'\r\n      },\r\n      formatDateTime(dateTimeStr) {\r\n        const date = new Date(dateTimeStr)\r\n        return date.toLocaleString('zh-CN', {\r\n          year: 'numeric',\r\n          month: '2-digit',\r\n          day: '2-digit',\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          second: '2-digit',\r\n          hour12: false\r\n        })\r\n      },\r\n      handleAdd() {\r\n        this.clearTimer() // 暂停自动刷新\r\n        this.dialogTitle = '添加充电桩'\r\n        this.form = {\r\n          pileId: '',\r\n          chargingPower: 0\r\n        }\r\n        this.dialogVisible = true\r\n      },\r\n      handleEdit(row) {\r\n        this.clearTimer() // 暂停自动刷新\r\n        this.dialogTitle = '编辑充电桩参数'\r\n        this.selectedPile = { ...row }\r\n        this.form = {\r\n          pileId: row.id,\r\n          chargingPower: row.chargingPower\r\n        }\r\n        this.dialogVisible = true\r\n      },\r\n      handleMaintenance(row) {\r\n        if (row.status === 'FAULT') {\r\n          // 故障状态转为维护状态\r\n          this.$confirm('是否开始对该充电桩进行维护？', '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }).then(async () => {\r\n            try {\r\n              // 调用故障恢复API\r\n              const response = await handleChargingPileRecovery(row.id)\r\n              if (response.code === 200) {\r\n                row.status = 'MAINTENANCE'\r\n                this.$message.success(response.message || '充电桩已进入维护状态')\r\n              } else {\r\n                this.$message.error(response.message || '操作失败')\r\n              }\r\n            } catch (error) {\r\n              console.error('处理充电桩故障恢复出错：', error)\r\n              this.$message.error('操作失败：' + error.message)\r\n            }\r\n          }).catch(err => {\r\n            if (err !== 'cancel') {\r\n              console.error('对话框操作出错：', err)\r\n            }\r\n          })\r\n        } else {\r\n          // 非故障状态转为故障状态，需要选择调度策略\r\n          this.$alert('', '请选择故障处理的调度策略', {\r\n            confirmButtonText: '确定',\r\n            showCancelButton: true,\r\n            customClass: 'strategy-dialog',\r\n            beforeClose: (action, instance, done) => {\r\n              if (action === 'confirm') {\r\n                // 确认将充电桩标记为故障状态\r\n                this.handleFaultWithStrategy(row, instance.inputValue)\r\n              }\r\n              done()\r\n            },\r\n            dangerouslyUseHTMLString: true,\r\n            message: this.renderStrategySelector()\r\n          }).catch(err => {\r\n            if (err !== 'cancel') {\r\n              console.error('对话框操作出错：', err)\r\n            }\r\n          })\r\n        }\r\n      },\r\n      handleToggleStatus(row) {\r\n        this.clearTimer() // 暂停自动刷新\r\n        const newStatus = row.status === 'AVAILABLE' ? 'OFFLINE' : 'AVAILABLE'\r\n        const action = newStatus === 'AVAILABLE' ? '开启' : '关闭'\r\n        const apiMethod = newStatus === 'AVAILABLE' ? powerOnChargingPile : powerOffChargingPile\r\n\r\n        this.$confirm(`确认${action}该充电桩吗？`, '提示', {\r\n          type: 'warning'\r\n        }).then(async () => {\r\n          try {\r\n            const response = await apiMethod(row.id)\r\n            if (response.code === 200) {\r\n              this.$message.success(response.message)\r\n              // 更新本地状态\r\n              row.status = newStatus\r\n              await this.fetchChargingPiles() // 立即刷新数据\r\n            } else {\r\n              this.$message.error(response.message || `${action}失败`)\r\n            }\r\n          } catch (error) {\r\n            console.error(`${action}充电桩出错：`, error)\r\n            this.$message.error(`${action}失败：` + error.message)\r\n          } finally {\r\n            this.startTimer() // 重启自动刷新\r\n          }\r\n        }).catch(err => {\r\n          if (err !== 'cancel') {\r\n            console.error('对话框操作出错：', err)\r\n          }\r\n          this.startTimer() // 重启自动刷新\r\n        })\r\n      },\r\n      handleSubmit() {\r\n        this.$refs.form.validate(async valid => {\r\n          if (valid) {\r\n            this.submitting = true\r\n            try {\r\n              const response = await setChargingPileParameters(this.form)\r\n              if (response.code === 200) {\r\n                this.$message.success(response.message)\r\n                this.dialogVisible = false\r\n                // 更新本地数据\r\n                const pile = this.chargingPiles.find(p => p.id === this.form.pileId)\r\n                if (pile) {\r\n                  pile.chargingPower = this.form.chargingPower\r\n                }\r\n                this.startTimer() // 重启自动刷新\r\n              } else {\r\n                this.$message.error(response.message || '设置参数失败')\r\n              }\r\n            } catch (error) {\r\n              console.error('设置充电桩参数出错：', error)\r\n              this.$message.error('设置参数失败：' + error.message)\r\n            } finally {\r\n              this.submitting = false\r\n            }\r\n          }\r\n        })\r\n      },\r\n      async fetchChargingPiles() {\r\n        this.loading = true\r\n        try {\r\n          console.log('开始获取充电桩列表')\r\n          const response = await getAllChargingPiles()\r\n          console.log('获取到的响应数据：', response)\r\n          if (response.code === 200) {\r\n            this.chargingPiles = response.data\r\n            console.log('设置充电桩数据：', this.chargingPiles)\r\n          } else {\r\n            this.$message.error(response.message || '获取充电桩列表失败')\r\n          }\r\n        } catch (error) {\r\n          console.error('获取充电桩列表出错：', error)\r\n          this.$message.error('获取充电桩列表失败：' + error.message)\r\n        } finally {\r\n          this.loading = false\r\n        }\r\n      },\r\n      // 渲染策略选择器的HTML\r\n      renderStrategySelector() {\r\n        // 使用DOM方式创建选择器，在mounted后会被挂载\r\n        return `\r\n          <div>\r\n            <p>请选择故障处理的调度策略：</p>\r\n            <div class=\"el-select-container\" style=\"margin-top: 15px;\">\r\n              <select id=\"strategySelect\" class=\"el-select\" style=\"width: 100%; height: 36px; border: 1px solid #DCDFE6; border-radius: 4px; padding: 0 15px; color: #606266;\">\r\n                <option value=\"PRIORITY\">优先级调度</option>\r\n                <option value=\"TIME_ORDER\" selected>时间顺序调度</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        `\r\n      },\r\n      // 使用选择的策略处理故障\r\n      async handleFaultWithStrategy(row, strategy) {\r\n        try {\r\n          // 获取选择的策略\r\n          const strategySelect = document.getElementById('strategySelect')\r\n          const selectedStrategy = strategySelect ? strategySelect.value : 'TIME_ORDER'\r\n          \r\n          // 调用故障处理API\r\n          const response = await handleChargingPileFault(row.id, selectedStrategy)\r\n          if (response.code === 200) {\r\n            row.status = 'FAULT'\r\n            this.$message.success(response.message || '充电桩已标记为故障状态')\r\n          } else {\r\n            this.$message.error(response.message || '操作失败')\r\n          }\r\n        } catch (error) {\r\n          console.error('处理充电桩故障出错：', error)\r\n          this.$message.error('操作失败：' + error.message)\r\n        }\r\n      },\r\n      // 添加定时刷新相关方法\r\n      startTimer() {\r\n        this.clearTimer() // 确保先清除可能存在的定时器\r\n        this.timer = setInterval(() => {\r\n          if (!this.dialogVisible) { // 只在没有对话框打开时刷新\r\n            this.fetchChargingPiles()\r\n          }\r\n        }, this.refreshInterval)\r\n      },\r\n      clearTimer() {\r\n        if (this.timer) {\r\n          clearInterval(this.timer)\r\n          this.timer = null\r\n        }\r\n      },\r\n      // 处理结束充电\r\n      async handleFinishCharging(row) {\r\n        this.clearTimer() // 暂停自动刷新\r\n        try {\r\n          // 弹窗确认\r\n          await this.$confirm('确认结束该充电桩的充电会话?', '提示', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          });\r\n          \r\n          // 获取当前使用该充电桩的用户ID (示例，实际需根据API调整)\r\n          const userId = row.currentUserId;\r\n          if (!userId) {\r\n            this.$message.error('无法获取当前使用充电桩的用户信息');\r\n            return;\r\n          }\r\n          \r\n          const response = await finishCharging(userId);\r\n          if (response.code === 200) {\r\n            this.$message.success('充电已结束');\r\n            await this.fetchChargingPiles(); // 刷新数据\r\n          } else {\r\n            this.$message.error(response.message || '结束充电失败');\r\n          }\r\n        } catch (error) {\r\n          if (error !== 'cancel') {\r\n            console.error('结束充电出错：', error);\r\n            this.$message.error('操作失败：' + (error.message || error));\r\n          }\r\n        } finally {\r\n          this.startTimer(); // 重启自动刷新\r\n        }\r\n      },\r\n      \r\n      // 处理取消等候\r\n      async handleCancelWaiting(row) {\r\n        this.clearTimer(); // 暂停自动刷新\r\n        \r\n        try {\r\n          // 显示用户列表对话框，让管理员选择要取消等候的用户\r\n          const queueDetails = await this.getQueueUsers(row.id);\r\n          if (!queueDetails || queueDetails.length === 0) {\r\n            this.$message.warning('该充电桩无等候用户');\r\n            return;\r\n          }\r\n          \r\n          // 调用对话框让管理员选择用户\r\n          this.$confirm('请在控制台中查看等待用户列表并输入要取消的用户ID', '选择用户', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            closeOnClickModal: false,\r\n            showInput: true,\r\n            inputPlaceholder: '请输入要取消的用户ID'\r\n          }).then(async ({ value }) => {\r\n            if (!value) {\r\n              this.$message.warning('请输入用户ID');\r\n              return;\r\n            }\r\n            \r\n            const userId = value.trim();\r\n            // 调用取消等候API\r\n            const response = await cancelAndLeave(userId);\r\n            if (response.code === 200) {\r\n              this.$message.success('已取消该用户的等候');\r\n              await this.fetchChargingPiles(); // 刷新数据\r\n            } else {\r\n              this.$message.error(response.message || '取消等候失败');\r\n            }\r\n          }).catch(() => {});\r\n          \r\n        } catch (error) {\r\n          if (error !== 'cancel') {\r\n            console.error('取消等候出错：', error);\r\n            this.$message.error('操作失败：' + (error.message || error));\r\n          }\r\n        } finally {\r\n          this.startTimer(); // 重启自动刷新\r\n        }\r\n      },\r\n      \r\n      // 获取充电桩队列中的用户\r\n      async getQueueUsers(pileId) {\r\n        try {\r\n          const response = await getChargingQueueDetails(pileId);\r\n          if (response.code === 200 && response.data) {\r\n            // 在控制台打印用户列表，便于管理员查看\r\n            console.table(response.data.map(user => ({\r\n              '用户ID': user.userId,\r\n              '请求时间': this.formatDateTime(user.requestTime),\r\n              '充电类型': user.chargingType === 'FAST' ? '快充' : '慢充',\r\n              '请求电量': user.requestedChargingAmount\r\n            })));\r\n            \r\n            return response.data;\r\n          }\r\n          return [];\r\n        } catch (error) {\r\n          console.error('获取充电桩等候队列出错：', error);\r\n          this.$message.error('获取等候队列失败：' + (error.message || error));\r\n          return [];\r\n        }\r\n      },\r\n    },\r\n    created() {\r\n      this.fetchChargingPiles()\r\n      this.startTimer()\r\n    },\r\n    beforeDestroy() {\r\n      this.clearTimer()\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .charging-piles-container {\r\n    padding: 20px;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}